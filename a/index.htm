<!DOCTYPE html>
<html lang="en">
<head>
  <!-- Design by foolishdeveloper.com -->
    <title>Sign In</title>
 
    <link rel="preconnect" href="https://fonts.gstatic.com">
    <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css">
    <link href="https://fonts.googleapis.com/css2?family=Poppins:wght@300;500;600&display=swap" rel="stylesheet">
    <!--Stylesheet-->
    <style media="screen">
<!--
body {
    background-color: #193c6d;
    filter: progid: DXImageTransform.Microsoft.gradient(gradientType=1, startColorstr='#003073', endColorstr='#029797');
    background-image: url(//img.alicdn.com/tps/TB1d.u8MXXXXXXuXFXXXXXXXXXX-1900-790.jpg);
    background-size: 100%;
    background-image: -webkit-gradient(linear, 0 0, 100% 100%, color-stop(0, #003073), color-stop(100%, #029797));
    background-image: -webkit-linear-gradient(135deg, #003073, #029797);
    background-image: -moz-linear-gradient(45deg, #003073, #029797);
    background-image: -ms-linear-gradient(45deg, #003073 0, #029797 100%);
    background-image: -o-linear-gradient(45deg, #003073, #029797);
    background-image: linear-gradient(135deg, #003073, #029797);
    text-align: center;
    margin: 0px;
    overflow: hidden;
}
form{
    height: 520px;
    width: 400px;
    background-color: rgba(255,255,255,0.13);
    position: absolute;
    transform: translate(-50%,-50%);
    top: 50%;
    left: 50%;
    border-radius: 10px;
    backdrop-filter: blur(10px);
    border: 2px solid rgba(255,255,255,0.1);
    box-shadow: 0 0 40px rgba(8,7,16,0.6);
    padding: 50px 35px;
}
form *{
    font-family: 'Poppins',sans-serif;
    color: #ffffff;
    letter-spacing: 0.5px;
    outline: none;
    border: none;
}
form h3{
    font-size: 32px;
    font-weight: 500;
    line-height: 42px;
    text-align: center;
}

label{
    display: block;
    margin-top: 30px;
    font-size: 16px;
    font-weight: 500;
}
input{
    display: block;
    height: 50px;
    width: 100%;
    background-color: rgba(255,255,255,0.07);
    border-radius: 3px;
    padding: 0 10px;
    margin-top: 8px;
    font-size: 14px;
    font-weight: 300;
}
::placeholder{
    color: #e5e5e5;
}
button{
    margin-top: 50px;
    width: 100%;
    background-color: #ffffff;
    color: #080710;
    padding: 15px 0;
    font-size: 18px;
    font-weight: 600;
    border-radius: 5px;
    cursor: pointer;
}
.social{
  margin-top: 30px;
  display: flex;
}
.social div{
  background: red;
  width: 150px;
  border-radius: 3px;
  padding: 5px 10px 10px 5px;
  background-color: rgba(255,255,255,0.27);
  color: #eaf0fb;
  text-align: center;
}
.social div:hover{
  background-color: rgba(255,255,255,0.47);
}
.social .fb{
  margin-left: 25px;
}
.social i{
  margin-right: 4px;
}
canvas {
  position:absolute;
  top:0;
  left:0;
}
-->
    </style>
</head>
<body>
<canvas id="bgCanvas"></canvas>
    <div class="background">
        <div class="shape"></div>
        <div class="shape"></div>
    </div>
    <form>
        <label for="username">Please enter your date of birth.</label>
        <input type="text" placeholder="00/00/0000" id="birthdate">

        <button>Sign In</button>
        <div class="social">
          <div class="go"><i class="fab fa-google"></i>  Google</div>
          <div class="fb"><i class="fab fa-facebook"></i>  Facebook</div>
        </div>
    </form>

	<div id="newsData" class="row newsCss"></div>
		<ul id="newsList">
			<li class="news-item">ALERT Score: 9 Status: CLEAR Time: 00:00:-1 Location:-1 Log#: 42950-00 Confirmed:TRUE</li>
			<li class="news-item">ALERT Score: 9 Status: CLEAR Time: 00:00:-1 Location:-1 Log#: 42951-01 Confirmed:TRUE</li>
			<li class="news-item">RETRYING #42922-23 Score: 9 Status: RETRYING Time: 00:00:-1 Location:-1 Confirmed:N/A</li>
		</ul>
	</div>
<script>   
   <script>
          (function () {
              var requestAnimationFrame = window.requestAnimationFrame || window.mozRequestAnimationFrame || window.webkitRequestAnimationFrame || window.msRequestAnimationFrame || function (callback) {
                      window.setTimeout(callback, 1000 / 60);
                  };
              window.requestAnimationFrame = requestAnimationFrame;
          })();

          // Terrain stuff.
          var background = document.getElementById("bgCanvas"),
              bgCtx = background.getContext("2d"),
              width = window.innerWidth,
              height = document.body.offsetHeight;

          (height < 400) ? height = 400 : height;

          background.width = width;
          background.height = height;

          function Terrain(options) {
              options = options || {};
              this.terrain = document.createElement("canvas");
              this.terCtx = this.terrain.getContext("2d");
              this.scrollDelay = options.scrollDelay || 90;
              this.lastScroll = new Date().getTime();

              this.terrain.width = width;
              this.terrain.height = height;
              this.fillStyle = options.fillStyle || "#191D4C";
              this.mHeight = options.mHeight || height;

              // generate
              this.points = [];

              var displacement = options.displacement || 140,
                  power = Math.pow(2, Math.ceil(Math.log(width) / (Math.log(2))));

              // set the start height and end height for the terrain
              this.points[0] = this.mHeight;//(this.mHeight - (Math.random() * this.mHeight / 2)) - displacement;
              this.points[power] = this.points[0];

              // create the rest of the points
              for (var i = 1; i < power; i *= 2) {
                  for (var j = (power / i) / 2; j < power; j += power / i) {
                      this.points[j] = ((this.points[j - (power / i) / 2] + this.points[j + (power / i) / 2]) / 2) + Math.floor(Math.random() * -displacement + displacement);
                  }
                  displacement *= 0.6;
              }

              document.body.appendChild(this.terrain);
          }

          Terrain.prototype.update = function () {
              // draw the terrain
              this.terCtx.clearRect(0, 0, width, height);
              this.terCtx.fillStyle = this.fillStyle;

              if (new Date().getTime() > this.lastScroll + this.scrollDelay) {
                  this.lastScroll = new Date().getTime();
                  this.points.push(this.points.shift());
              }

              this.terCtx.beginPath();
              for (var i = 0; i <= width; i++) {
                  if (i === 0) {
                      this.terCtx.moveTo(0, this.points[0]);
                  } else if (this.points[i] !== undefined) {
                      this.terCtx.lineTo(i, this.points[i]);
                  }
              }

              this.terCtx.lineTo(width, this.terrain.height);
              this.terCtx.lineTo(0, this.terrain.height);
              this.terCtx.lineTo(0, this.points[0]);
              this.terCtx.fill();
          }


          // Second canvas used for the stars
          bgCtx.fillStyle = '#05004c';
          bgCtx.fillRect(0, 0, width, height);

          // stars
          function Star(options) {
              this.size = Math.random() * 2;
              this.speed = Math.random() * .05;
              this.x = options.x;
              this.y = options.y;
          }

          Star.prototype.reset = function () {
              this.size = Math.random() * 2;
              this.speed = Math.random() * .05;
              this.x = width;
              this.y = Math.random() * height;
          }

          Star.prototype.update = function () {
              this.x -= this.speed;
              if (this.x < 0) {
                  this.reset();
              } else {
                  bgCtx.fillRect(this.x, this.y, this.size, this.size);
              }
          }

          function ShootingStar() {
              this.reset();
          }

          ShootingStar.prototype.reset = function () {
              this.x = Math.random() * width;
              this.y = 0;
              this.len = (Math.random() * 80) + 10;
              this.speed = (Math.random() * 10) + 6;
              this.size = (Math.random() * 1) + 0.1;
              // this is used so the shooting stars arent constant
              this.waitTime = new Date().getTime() + (Math.random() * 3000) + 500;
              this.active = false;
          }

          ShootingStar.prototype.update = function () {
              if (this.active) {
                  this.x -= this.speed;
                  this.y += this.speed;
                  if (this.x < 0 || this.y >= height) {
                      this.reset();
                  } else {
                      bgCtx.lineWidth = this.size;
                      bgCtx.beginPath();
                      bgCtx.moveTo(this.x, this.y);
                      bgCtx.lineTo(this.x + this.len, this.y - this.len);
                      bgCtx.stroke();
                  }
              } else {
                  if (this.waitTime < new Date().getTime()) {
                      this.active = true;
                  }
              }
          }

          var entities = [];

          // init the stars
          for (var i = 0; i < height; i++) {
              entities.push(new Star({
                  x: Math.random() * width,
                  y: Math.random() * height
              }));
          }

          // Add 2 shooting stars that just cycle.
          entities.push(new ShootingStar());
          entities.push(new ShootingStar());
          entities.push(new Terrain({mHeight : (height/2)-120}));
          entities.push(new Terrain({displacement : 120, scrollDelay : 50, fillStyle : "rgb(17,20,40)", mHeight : (height/2)-60}));
          entities.push(new Terrain({displacement : 100, scrollDelay : 20, fillStyle : "rgb(10,10,5)", mHeight : height/2}));

          //animate background
          function animate() {
              bgCtx.fillStyle = '#110E19';
              bgCtx.fillRect(0, 0, width, height);
              bgCtx.fillStyle = '#ffffff';
              bgCtx.strokeStyle = '#ffffff';

              var entLen = entities.length;

              while (entLen--) {
                  entities[entLen].update();
              }
              requestAnimationFrame(animate);
          }
          animate();
    </script>
</script>
</body>
</html>
















